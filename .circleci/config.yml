version: 2.1


orbs:
  slack: circleci/slack@4.12.1

commands:

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

  destroy_environment:
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: echo Workflow ID that is going to be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflowID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Back-end build
          command: |
             cd backend
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps-{{ checksum "backend/package-lock.json" }}

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Run frontend unit tests
          command: |
            cd frontend
            npm run test
          
                
  test-backend:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Run backend unit tests
          command: |
            cd backend
            npm run test
      
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Analyze Frontend
          command: |
            cd frontend
            npm audit fix --force --audit-level=critical
      

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd backend 
            npm install
      - run:
          name: Analyze Backend
          command: |
            cd backend
            npm install
            npm audit fix --force --auti-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installing packages
          command: |
            yum install git -y
            yum install tar gzip -y
      - run:
          name: Ensuring Backend Exist
          command:
            aws cloudformation deploy 
              --template-file .circleci/files/backend.yml 
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              --tags project=udapeople
      
      - run:
          name: Ensuring Frontend Infrastructure exist
          command:
            aws cloudformation deploy 
              --template-file .circleci/files/frontend.yml 
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              --tags project=udapeople
      - run: 
          name: Adding EC2 instance IP to Ansible Inventory for backend
          command: |
           aws ec2 describe-instances \
           --query 'Reservations[*].Instances[*].PublicIpAddress' \
           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --output text >> .circleci/ansible/inventory.txt
           cat .circleci/ansible/inventory.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
         

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["7a:13:40:7a:84:05:21:f0:35:ed:ec:ac:7b:b3:51:4d"]
      - persist_to_workspace:
          root: ~/
          paths:
            - "project/.circleci/ansible/inventory.txt"
      - run:
          name: Install dependencies
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml     

  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending"
            fi
     # Here's where you will add some code to rollback on failure  
      - destroy_environment
      - revert-migrations
             

  #deploy-frontend:
    #docker:
      # Docker image here that supports AWS CLI
    #steps:
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Get backend url
          #command: |
            # your code here
            #export API_URL="http://${BACKEND_IP}:3030"
            #echo "${API_URL}"
      #- run:
          #name: Deploy frontend objects
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  #deploy-backend:
    #docker:
      # Docker image here that supports Ansible
    #steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Deploy backend
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #smoke-test:
    #docker:
      # Lightweight Docker image 
    #steps:
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Get backend url
          #command: |
            # your code here
      #- run:
          #name: Backend smoke test.
          #command: |
            # your code here
      #- run:
          #name: Frontend smoke test.
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #cloudfront-update:
    #docker:
      # Docker image here that supports AWS CLI
    #steps:
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            # your code here
      #- run:
          #name: Update cloudfront distribution
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

#cleanup:
    #docker:
      # Docker image here
    #steps:
      # Checkout code from git
      #- run:
          #name: Get old stack workflow id
          #command: |
            # your code here
            #export OldWorkflowID="the id here"
            #export STACKS=[] #put the list of stacks here
      #- run:
          #name: Remove old stacks and files
          #command: |
            #if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            #then
              # your code here
            #fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [circleci-project-setup]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          #requires: [run-migrations]
      #- smoke-test:
          #requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]